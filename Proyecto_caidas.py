import socket
import time
import csv
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
import numpy as np

username = 'tanifloyd@gmail.com'
password = 'Tania11Vanesav'

def caida(username,password):
    smtp_ssl_host = 'smtp.gmail.com'  # smtp.mail.yahoo.com
    smtp_ssl_port = 465
#ddamarisr@unal.edu.co
    sender   = 'SISTEMA DE CAIDAS'
    targets = ['tvvasquezg@gmail.com', 'tvvasquezg@unal.edu.co']#,'tvcastillod@unal.edu.co']

    msg = MIMEText('Hello, an important person for you has suffered a fall '+str(datetime.now()))
    msg['Subject'] = ('Hello Emergency')
    msg['From'] = sender
    msg['To'] = ', '.join(targets)

    server = smtplib.SMTP_SSL(smtp_ssl_host, smtp_ssl_port)
    server.login(username, password)
    server.sendmail(sender, targets, msg.as_string())
    print("Envado mensaje")
    server.quit()

def leerDatos(nombreTxt):
    listaEn =[]
    f = open (nombreTxt+'.txt','r')#Abre  el archivo
    for linea in f:
        linea = linea.replace("\n","")
        linea = linea.replace("[","")
        linea = linea.replace("]","")
        linea = linea.replace(" ","")
        linea = linea.replace("","")
        linea=linea.split(',')
        for i, v in enumerate(linea): #Combierte en cadena en float
            linea[i] = float(v)
        listaEn.append(linea)

    f.close()
    return listaEn


def kkn(lista):
    pass

def cua(a):
    return((a**2)*0.09)

IP = "192.168.1.8" #"192.168.43.156" #0.14 se debe buscar la ip del computador y ponerla aquí
#IP = "10.203.160.83"
#IP = str(obtener_info_equipo())
PORT = 5558 #utilizar el mismo número de puerto tanto en el celular como en el computador
DECIMALS = 3

# Start socket server.
def leerDatosCel(IP,PORT):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((IP, PORT))
    print("Esperando datos...")

    contador = 0
    FRAMES = 20 #número de datos a tomar

    start_time = time.time()
    datos = [13]
    tempora = ""
    temtem = 0
    temtem2 = 0
    fc=1
    temporal = 0
    #archivo-salida.py
    aceleracion =[]
    distancia = []
    caidas = 0
    while True:
        try:  # used try so that if user pressed other than the given key error will not be shown
            while contador < FRAMES:
                # Recieve data from socket.
                data_cellphone, addr = sock.recvfrom(2048) # buffer size is 1024 bytes.
                #print((data_cellphone.split(',')))
                info = str(data_cellphone, 'utf-8')

                #print(info.split(","))
                tempora = info.split(",")#Separa los datos por comas
                for i in range(0, len(tempora)):
                    tempora[i] = float(tempora[i])
                aceleraci = abs((cua(tempora[2])+cua(tempora[3])+cua(tempora[4]))**(1/2))
                #print(aceleraci)
                if(aceleraci>12):
                    print("--------------------------------")
                    print("|Aceleracion mayor a la normal |",aceleraci)
                    print("--------------------------------")

                    from datetime import datetime
                    dt = datetime.now()
                    temtem = float(dt.microsecond)
                    #print(dt.microsecond)

                    #dt.microsecond()
                    print("La diferencia en tiempos es: ",(temtem)-(time2))

                    if((temtem-time2)>28000 and (temtem-time2)<65000):# and (temtem/1000)-(temtem2/1000)<70 ):
                        #    print("La diferencia en tiempo es: ",temtem-time1)
                        f = open ('Datos_caidas.txt','a')
                        aceleracion.append(aceleraci)
                        distancia.append(temtem-time1)
                        print("///////////////////////////////////////////////////////////")
                        print("/Se registro una Caida a las ",datetime.now(),"\n \n","/")
                        print("///////////////////////////////////////////////////////////")
                        caidas+=1
                        print(caidas)
                        print(type(aceleracion),aceleracion)
                        print(type(distancia),distancia)
##
##                        if (caidas == 1):
##
##                            caida(username,password)
##                            return aceleracion,distancia
##                            #leerDatosCel(IP,PORT)
##
##                            caidas =0
##                        else:
##                            pass

                        #tempora.insert(fc,6)
                        f.write(str(tempora[0:5]))#+","+str(datetime.now())+"\n")
                        f.close()
                        fc+=1
                    else:
                        f = open ('DATOs_cai1.txt','a')
                        f.write("\n")


                        #f.close()
                    temtem2 = temtem





               # time1 = temtem;
            count+=1

        except:
            break  # if user pressed a key other than the given key the loop will break





def datas(info22):
    fc =0
    tempora = []
    temtem2=0
    cont = 0
    aa =[]
    d = []
    distancia = []
    aceleracion=[]
    while cont!= len(info22):
        
        info2 = info22[cont]
        lista=[]
        info=[]
        for i in info2:
            info.append(i)
        aceleraci = abs((cua(info[2])+cua(info[3])+cua(info[4]))**(1/2))
        if(aceleraci>12):
            print("--------------------------------")
            print("|Aceleracion mayor a la normal |",aceleraci)
            print("--------------------------------")

            from datetime import datetime
            dt = datetime.now()
            temtem = float(dt.microsecond)
            #print(dt.microsecond)

            #dt.microsecond()
            print("La diferencia en tiempos es: ",(temtem)-(temtem2))
            distancias = temtem-temtem2
            if((temtem-temtem2)>28000 and (temtem-temtem2)<65000):# and (temtem/1000)-(temtem2/1000)<70 ):
                #    print("La diferencia en tiempo es: ",temtem-time1)
                f = open ('Datos_caidas.txt','a')
                aceleracion.append(aceleraci)
                distancia.append(temtem-temtem2)
                print("///////////////////////////////////////////////////////////")
                print("/Se registro una Caida a las ",datetime.now(),"\n \n","/")
                print("///////////////////////////////////////////////////////////")
                #caidas+=1
                #print(caidas)
                #print(type(aceleracion),aceleracion)
                #print(type(distancia),distancia)


                #tempora.insert(fc,6)
                f.write(str(tempora[0:5])+"\n")#+","+str(datetime.now())+"\n")
                f.close()
                fc+=1
            else:
                f = open ('DATOs_cai1.txt','a')
                f.write("\n")


                #f.close()
            temtem2 = temtem





            time1 = temtem;
        cont+=1


    #print("No se detecto caida")
    #print((lista))
        #print(aceleraci)
        #print(distancia)
        aa.append(aceleraci)
        d.append(distancias)
    #print(aa)
    #print(d)
    return aceleracion,distancia



data = leerDatos("datos_caidas")
aa =[]
d = []
for a,e in enumerate(data):
     print(a,e)
aa,b= datas(data)
     #lis.append(a)
#print(lis)
#yyy,xxx= leerDatosCel(IP,PORT)
import matplotlib.pyplot as plt
#plt.plot(lis)
y= [14.92548310976901, 25.56174752828922, 13.361047395320472, 21.515176500554208, 27.91521842364841, 15.375382315246668, 25.529863192935448, 24.035296309594354, 18.83562107231933, 17.530809808163458]
x= [52954.0, 39037.0, 44038.0, 39990.0, 48995.0, 42036.0, 41015.0, 41032.0, 29975.0, 35027.0]
yy =[2.9721889812056026, 2.8323448677729908, 2.9101475838864257, 2.727998183650422, 3.0918391517024295, 2.3885985870380146, 2.8819802723127723, 3.04933538660476, 3.1839961212287933, 2.9245236227461042, 2.38635308787279, 2.0817190876772975, 2.73028239748199, 2.6334788094837593, 2.9685827830801683, 3.2798164719996143, 3.7904277238855246, 3.1478358565846474, 3.7110635645324104, 2.838615107759416, 2.9024902015338485, 3.2869424394108275, 3.0092036969936085, 3.356531294357316, 3.107818662663573, 2.2491163064634963, 3.0076647037194824, 3.131675744709212, 2.261256363175127, 4.320729834183109, 4.140186311025145, 2.9542214507379096, 2.888980311459391, 3.2294348994831896, 2.7243808709503154, 2.865698804829286, 3.0971867783522518, 2.678079718753719, 2.10621731784733, 2.573844890431434, 2.591273943449438, 5.385317447467697, 3.012839419882845, 3.351739658744396, 2.554367700625734, 3.776732897624612, 2.705588034051008, 2.9387213699158345, 3.1808320090819002, 3.0344826791398893, 3.0799131335152943, 3.0611711435331417, 3.2200569979427383, 2.936704719579413, 3.153189827777579, 3.0019071088226563, 2.893343370566307, 2.8806026869389676, 3.0540037278955636, 2.813512233845803, 2.908805027842189, 3.8283264124157435, 3.084864771752564, 2.8111429366006986, 3.0668548221264076, 3.1412309513946917, 2.9211868991901215, 2.856638547313958, 2.965575431514093, 3.1224323691635023, 3.0383773251523585, 4.11162300801034, 2.7876355626229192, 3.4196148204147203, 3.4027558155118918, 2.8348391382933884, 2.7660768861331384, 2.9376708018428475, 3.0085324661701756, 2.956603727251929, 3.084851453473895, 2.8812652845581574, 2.7425750928643686, 2.8704818027641283, 2.8097607780734646, 3.062591094155405, 4.265173801851455, 2.456190067971125, 3.4647946562530945, 3.3379208633519157, 3.0759489950257626, 2.9875832540700853, 3.0162703592350604, 3.2325370160293603, 3.354850652413606, 4.090192133628932, 2.788882098619445, 3.2947169711524533, 3.2583109796334666, 2.82242586085091, 2.583468929559634, 2.4698702476041126, 2.9333861474412126, 4.1547966556740175, 3.1931236462122787, 2.8158606961282726, 2.9873636973090503, 2.9204821417019486, 3.0824951240837346, 2.788220787527415, 3.007246343417845, 3.165073051289654, 3.3576150106883906, 3.7831125399596557, 2.894005850028641, 3.3438276286315953, 3.1233308326208418, 2.754702557446085, 2.266839981119091, 1.9509490844201958, 4.278329703283747, 4.9279448840262, 1.4985732714819118, 3.593611894737661, 2.823549861433299, 2.7770011055093224, 2.824025090185992, 3.2606575625171064, 2.930001892490856, 3.733225240994708, 3.6803669749088876, 3.3836411644853834, 3.4924185831598136, 3.0624308726892107, 1.9026024361384593, 2.0142090705783247, 2.491845256030157, 5.292585103708773, 3.5988108661056364, 2.751069126721464, 2.4563465614607396, 3.2406980081457757, 2.7712565561492135, 2.9117512565464794, 2.9645827261184667, 3.133248113380107, 3.0804869631277456, 3.3874777209599474, 3.486649109101746, 2.6098293047630525, 3.841026284731725, 3.269595828233208, 2.49400883919845, 2.4611477444477, 2.3882360310488577, 3.0941135095532615, 3.9398380030148448, 3.0830404051844664, 3.096763350661461, 2.8402267374278414, 3.05248539062843, 3.670261022052791, 4.221430873530917, 3.501049112766058, 2.086531919238237, 1.993252580582802, 2.315888274507214, 3.041374669454587, 3.4328358728608044, 3.5646146060969905, 3.4034695503265486, 3.035922731230161, 3.0625857457383945, 3.047445805916817, 3.0665609222710706, 3.0501607252733423, 3.01127353290929, 2.959020599793114, 2.95528480353417, 3.054854541545309, 2.9981596255036185, 3.0366629661521545, 3.0812180546011345, 3.1188309636785383, 3.1254477871178716, 3.0189180065049794, 2.927027005341768, 2.9083318930273414, 2.967930551748137, 2.978878048863363, 2.980990045270195, 2.9399404126614543, 2.9675109721785358, 3.094239004989757, 3.202891606033523, 3.418445567798323, 3.547208283988974, 3.6459547638444447, 3.7237968123945753, 3.5968018419145644, 3.11682187171484, 2.9352154844235883, 3.007490064821495, 2.9126206035115523, 3.060963759994554, 2.865872929841796, 2.717698294513208, 2.543280676606497, 2.568885723421733, 2.834301977559907, 3.1070381861187353, 3.1355847014552163, 3.0621043352570467, 3.0468846876769065, 3.1479480602449588, 3.266414685859712, 3.25957180316679, 3.096833463394504, 2.961830871268648, 2.984367309833024, 2.993140878742596, 2.9728311657408333, 2.945442793537161, 2.943066191916179, 2.9356781397149105, 2.9591323745314266, 3.041524252739077, 3.0232825488200734, 2.9529636384486686, 2.900703614642489, 2.8698608711921905, 2.904447858027408, 2.9418580353239348, 3.0227592841640565, 3.117122524059649, 3.068363467713693, 2.94741983097081, 2.922426421657182, 2.996609253806709, 3.0367279759636028, 2.9903735452280875, 2.876502720318547, 2.92240181528824, 2.9902598984034814, 2.9895280881771287, 2.9319982895629386, 2.8900427401683872, 2.9298602850648012, 3.06894642181971, 3.096489060209966, 2.9815774650342393, 2.899518825598482, 2.9081704454863027, 2.9266921720604646, 2.9328560193095057, 2.97036053872253, 3.05554954304459, 3.1158349940264807, 3.0644223631869028, 2.9993786056448424, 3.037809658289999, 3.05696976432545, 3.0824520434225735, 3.136328173198717, 3.013311990153028, 3.0027724888842315, 3.0214726641159606, 2.9977622003754734, 2.9663296259856224, 3.0525342012826, 3.0436331267089334, 2.907777697830424, 2.863823020020616, 2.920897692491128, 3.0079142707198288, 2.9759878729591627, 2.9804483337243073, 2.9686260761503793, 2.9724251613791726, 3.0276216556894955, 3.0587921586796316, 3.043704418960553, 2.964249417643529, 3.005511337526445, 3.129677385929738, 3.1510101808785067, 3.0771498679784837, 3.04924589693911, 3.0120667671882706, 3.0236964282149756, 2.9672505000420846, 3.0766802433792173, 3.373458728071236, 3.421163552068214, 3.378255909489392, 3.506772772792671, 3.457685253171549, 3.209580449217624, 3.1055054226325223, 2.935007357742055, 2.7710947060683435, 2.6529867621230228, 2.635475856463117, 2.8125377917460948, 3.1206919569223746, 3.4050682063653297, 3.473001346098213, 3.733449147905995, 3.8134247324419555, 3.577400174707884, 3.1633528699783082, 2.752279773206205, 2.656520361299721, 2.7337062753704906, 2.6195984367837752, 2.5415005292149755, 2.394740393028021, 2.2471487734460305, 2.159661431798975, 2.2052992858113387, 2.5484246369080643, 3.9000898489650204, 2.9968900430279386, 4.491000891783479, 1.6689159894973742, 3.4039317399148885, 2.7105829926419887, 2.9802584804006513, 2.7040544724542808, 3.139741266410339, 2.997630699402446, 3.125478684937717, 3.310085465663991, 3.8573740433097745, 3.115990765390681, 3.4906799824675994, 3.520461256710546, 3.486392791984288, 3.2268201933172542, 2.775706758647246, 2.4628426685438107, 2.3548080877218003, 2.366277532327939, 2.3681866037117936, 2.301519133094487, 2.2820184618008676, 2.3035197546363695, 2.2972068996936255, 2.30321756245475, 2.3883880840432945, 3.11007424509448, 4.229014704396286, 4.854497004839945, 4.274977263097431, 3.463567794918991, 2.58272735494864, 2.8871420661269855, 3.5680210145121065, 4.381780754442194, 4.7082841460557585, 3.1593975675751858, 1.7918929934569197, 1.426072806696769, 2.1906155299367347, 2.9936738449604023, 3.6748149259520546, 4.22430985369208, 3.395392551679408, 2.8939700084831563, 2.7690335588432293, 2.6948022135214305, 2.90707006107524, 3.0005814936441904, 2.9503488980118946, 2.8525203224517086, 2.7518978578428377, 2.7042200354261117, 2.9037261906040657, 3.0553528535997283, 3.104953217038865, 3.167373546015689, 3.177710458805207, 3.1701397461310754, 3.297352679044206, 3.3181240392727935, 3.27366435970458, 3.247003624882485, 3.5942734954368727, 3.7411784319917163, 3.7209828661255617, 3.630955089229279, 3.588608213500047, 3.0055910799707934, 2.6976594355107166, 2.726503552170802, 3.1165517579530104, 3.179649037236657, 3.0824142323834414, 3.134140963645381, 3.4024560673137283, 3.691547126883253, 3.522272110442349, 3.0405173901821376, 2.7098977748247255, 2.598376514287335, 2.5779479688310234, 2.407723727922288, 2.302670260805919, 2.402728917293834, 2.382663742536911, 2.3732225812173624, 2.4774175647233956, 2.7854254271116288, 3.1457645096224223, 3.306517350627394, 3.476418186869928, 3.295903684879156, 3.3206743742800198, 3.40641434502616, 3.3637339966174498, 3.2547886244731776, 3.899540684490931, 4.274317682390957, 4.907754868572797, 4.976372320275082, 3.3831773069113598, 1.737225425786763, 1.7241744372307577, 2.6311156359992998, 3.8167998218402808, 4.160254637639383, 3.508609788790996, 2.710193640683263, 2.693346518738352, 2.934131055355231, 3.0031481531885835, 3.1531661944781786, 3.0931556847336346, 3.0291149895637837, 2.7970260402792104, 2.657758803954941, 2.6940209965774207, 3.0049511044274912, 3.093108271625809, 3.0462679232135836, 3.0191285911666634, 3.0595802212068244, 3.198911042839422, 3.249784420542384, 3.2111988508966554, 3.1545629237661434, 3.3412562727213846, 3.5473078045188013, 3.78814467780733, 3.565891228010187, 3.411276321261589, 3.1343157387219303, 2.9820803711503148, 2.8755192331125174, 2.9096036637315397, 2.838733700085304, 3.173773559975569, 3.438701289731343, 3.4813431459711066, 3.512372582742326, 3.3937435392203694, 3.2243000868405534, 3.045007123144378, 2.7038358918395917, 2.4980224858875872, 2.4607853807270557, 2.315321014459982, 2.228053486790656, 2.186072478212925, 2.2297570181524264, 2.4106523287276413, 2.4402191417985395, 2.80736948049237, 3.4405405534595865, 3.70199957455427, 3.98569036052727, 3.5222171100033, 3.4502497735671254, 3.397273979236882, 3.7532848812740016, 4.099938198314701, 3.930744364621032, 3.0209338324432067, 2.4032067514052966, 2.4349988213549505, 2.5458196735039973, 2.768284945593571, 2.862745657581197, 2.9160037191334305, 2.789327806121037, 3.0739250804142904, 3.306152092690232, 3.2333552140153117, 3.0814071347356875, 2.9955931983498694, 2.946671074280263, 2.8701802277905824, 2.8868761352022014, 2.9263526257100323, 3.0947021116740783, 3.068585573191662, 3.510155663214952, 3.6527312698855905, 2.7695502324384726, 3.1912967270374595, 3.220813468675266, 2.5607668577986558, 2.524105191944266, 2.8484321634892416, 3.7640129901476165, 3.203150856578566, 2.677094675202952, 3.1312609472862527, 3.041415239654066, 3.296460829435108, 3.0594944435314795, 2.89178012649648, 2.8189911014403717, 2.7020293207143404, 2.629961613788308, 2.640749365237072, 2.795673360748712, 2.933469660657836, 3.0636980742233724, 3.1786541586023476, 3.305417997772748, 3.3049323911390385, 3.233504349772859, 3.1553570875576034, 3.121690229667255, 3.1536438638501973, 3.1732122179268125, 2.772541262091513, 3.2055413146612226, 4.534444832611816, 5.12254142882222, 3.6648797019820445, 2.916552247089018, 2.938088577630021, 2.9277441589045994, 2.944799770782387, 3.607892922468736, 3.5451421424253216, 3.3964003783417525, 3.654037598328731, 3.6696513199485317, 3.7184474784511883, 4.220742817324931, 4.34591533051439, 4.001757979938318, 4.1526745658671596, 3.929906804238492, 3.5223845233023607, 3.2477813503990687, 2.983063482395237, 2.768125815420968, 2.823268616338162, 2.992011614282271, 3.631851358467194, 3.5988906915881733, 3.0144073596645824, 2.843836466817317, 2.8295960877835546, 2.738441492893357, 2.9137409304878155, 2.889105309607111, 3.7473329996145255, 3.7452626476657147, 3.4499325123833944, 3.404542727004612, 3.3018423856992323, 2.987577620748957, 2.637429896698678, 2.1384555548339086, 2.862133471730485, 2.947095758539244, 2.8102692593415317, 2.602577670310725, 2.426788581644474, 2.750620884454999, 2.4614932541041017, 2.514207288590183, 2.4713032209747143, 2.778598510040628, 2.5631509475643446, 2.7116456516292833, 3.5707833552317343, 3.3446006532918098, 2.971633520473209, 1.832085115380833, 1.4666881263581566, 2.3669516725104467, 3.480076938804658, 4.001306814029637, 3.586162330402794, 3.1812976739060432, 3.086980991195119, 3.097712389812844, 3.1151136159055257, 3.050121422173222, 2.973496139227357, 3.053021292097387, 3.1920363860708103, 3.2010218321654733, 2.9795627414102226, 2.823711222841316, 2.7687724391867237, 2.9244618889635063, 3.1038723749535837, 3.0354040175897508, 2.891310695860962, 2.6883726136828576]
xx =[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#c = np.array(x,y)
print(aa)
print(b)
plt.scatter(x,y)
plt.scatter(xx,yy,facecolor = 'green')
plt.scatter(b,aa,facecolor = 'pink')
#plt.scatter(xxx,yyy,facecolor = 'pink')
plt.show()
def knns(xxx,yyy):
    a = numpy.array((xa ,ya, za))
    b = numpy.array((xb, yb, zb))
    dist = numpy.linalg.norm(xxx-yyy)
def squareEuclideanDist(p_vec, q_vec):
    diff = p_vec - q_vec
    return max(np.sum(diff ** 2))



